services:
  frontend:
    container_name: b-saffer-frontend-prod
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    networks:
      - proxy
    volumes:
      - ./apps/frontend/frontend.conf:/etc/nginx/conf.d/default.conf
    labels:
      - traefik.http.routers.frontend-prod.rule=Host(`${SERVER_DOMAIN}`)
      - traefik.http.routers.frontend-prod.tls=true
      - traefik.http.routers.frontend-prod.tls.certresolver=letsencrypt

  backend:
    command: npm run start:deploy
    container_name: b-saffer-backend-prod
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://bsaffer:EqhvLbsPhrkkZjcaGWcV7qT@postgres:5432/bsaffer
      - MINIO_ENDPOINT=minio-prod.bsaffer.iot-ap.be
      - MINIO_ACCESSKEY=bsaffer
      - MINIO_SECRETKEY=XvketrRmsyw6fHj5U4GZxq
      - MINIO_BUCKET=bsaffer

      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - OAUTH_AUTHORIZATION_URL=${OAUTH_AUTHORIZATION_URL}
      - OAUTH_TOKEN_URL=${OAUTH_TOKEN_URL}
      - OAUTH_CALLBACK_URL=${OAUTH_CALLBACK_URL}
      - OAUTH_PROFILE_INFO_URL=${OAUTH_PROFILE_INFO_URL}

      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORGANISATION=${INFLUXDB_ORGANISATION}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}

      - SESSION_SECRET=kmqlsdfsqmfjsqmlfqsfkjqsmlkfjqsdlfqslmdjflqsdjfmlqsdfmkqjsdfmjqsdfmokjqsdofj
      - MQTTACO_REFRESH_URL=http://mqttaco:4000/refresh-ttn-clients
    networks:
      - proxy
      - backend
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.backend-prod.rule=Host(`${SERVER_DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.routers.backend-prod.tls=true
      - traefik.http.routers.backend-prod.tls.certresolver=letsencrypt
      - traefik.http.routers.backend-prod.middlewares=backend-stripprefix
      - traefik.http.services.backend-prod.loadbalancer.server.port=3000
      - traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 10s
      retries: 8
  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: bsaffer
      POSTGRES_USER: bsaffer
      POSTGRES_PASSWORD: EqhvLbsPhrkkZjcaGWcV7qT
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "kc", "-U", "kc"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - backend

  minio:
    image: quay.io/minio/minio
    networks:
      - proxy
    command: server /data --console-address ":9001"
    volumes:
      - minioData:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=adminadmin
      - MINIO_BROWSER_REDIRECT_URL=https://minio-prod.bsaffer.iot-ap.be/minio/ui/
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.minio-prod.rule=Host(`minio-prod.bsaffer.iot-ap.be`)
      - traefik.http.routers.minio-prod.tls=true
      - traefik.http.routers.minio-prod.service=minio-prod
      - traefik.http.routers.minio-prod.tls.certresolver=letsencrypt
      - traefik.http.services.minio-prod.loadbalancer.server.port=9000

      - traefik.http.routers.minio-ui-prod.rule=Host(`minio-prod.bsaffer.iot-ap.be`) && PathPrefix(`/minio/ui`)
      - traefik.http.routers.minio-ui-prod.tls=true
      - traefik.http.routers.minio-ui-prod.service=minio-ui-prod
      - traefik.http.routers.minio-ui-prod.tls.certresolver=letsencrypt
      - traefik.http.services.minio-ui-prod.loadbalancer.server.port=9001
      - traefik.http.routers.minio-ui-prod.middlewares=minio-prod-stripprefix
      - traefik.http.middlewares.minio-prod-stripprefix.stripprefix.prefixes=/minio/ui

  mqttaco:
    build:
      context: .
      dockerfile: ./apps/mqttaco/Dockerfile
    restart: unless-stopped
    networks:
      - backend
    environment:
      - MQTT_BROKER_URL=mqtt://mqtt.iot-ap.be
      - INFLUX_DB_URL=http://influxdb:8086/
      - INFLUX_DB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUX_DB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUX_DB_ORG=${INFLUXDB_ORGANISATION}
      - PG_DB_URL=postgres://bsaffer:EqhvLbsPhrkkZjcaGWcV7qT@postgres:5432/bsaffer
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_started
      backend:
        condition: service_healthy

  influxdb:
    build:
      context: .
      dockerfile: ./influxdb/Dockerfile
    networks:
      - backend
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      - TZ=${TIMEZONE}
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminadmin
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORGANISATION}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
      - DOCKER_INFLUXDB_INIT_CLI_CONFIG_NAME=BSAFFER
    restart: unless-stopped

networks:
  proxy:
    external: true
    name: traefik
  backend:

volumes:
  data:
  influxdb_data:
  minioData:
services:
  frontend:
    container_name: b-saffer-frontend-staging
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    networks:
      - proxy
    volumes:
      - ./apps/frontend/frontend.conf:/etc/nginx/conf.d/default.conf
    labels:
      - traefik.http.routers.frontend-staging.rule=Host(`${SERVER_DOMAIN}`)
      - traefik.http.routers.frontend-staging.tls=true
      - traefik.http.routers.frontend-staging.tls.certresolver=letsencrypt

  backend:
    command: npm run ci:dev
    container_name: b-saffer-backend-staging
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://bsaffer:EqhvLbsPhrkkZjcaGWcV7qT@postgres:5432/bsaffer
    networks:
      - proxy
      - backend
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.backend-staging.rule=Host(`${SERVER_DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.routers.backend-staging.tls=true
      - traefik.http.routers.backend-staging.tls.certresolver=letsencrypt
      - traefik.http.routers.backend-staging.middlewares=backend-stripprefix
      - traefik.http.services.backend-staging.loadbalancer.server.port=3000
      - traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: bsaffer
      POSTGRES_USER: bsaffer
      POSTGRES_PASSWORD: EqhvLbsPhrkkZjcaGWcV7qT
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "kc", "-U", "kc"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - backend

  minio:
    image: quay.io/minio/minio
    networks:
      - proxy
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=adminadmin
      - MINIO_BROWSER_REDIRECT_URL=https://minio-staging.bsaffer.iot-ap.be/minio/ui/
    volumes:
      - data:/data
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.minio-staging.rule=Host(`minio-staging.bsaffer.iot-ap.be`)
      - traefik.http.routers.minio-staging.tls=true
      - traefik.http.routers.minio-staging.service=minio-staging
      - traefik.http.routers.minio-staging.tls.certresolver=letsencrypt
      - traefik.http.services.minio-staging.loadbalancer.server.port=9000

      - traefik.http.routers.minio-ui-staging.rule=Host(`minio-staging.bsaffer.iot-ap.be`) && PathPrefix(`/minio/ui`)
      - traefik.http.routers.minio-ui-staging.tls=true
      - traefik.http.routers.minio-ui-staging.service=minio-ui-staging
      - traefik.http.routers.minio-ui-staging.tls.certresolver=letsencrypt
      - traefik.http.services.minio-ui-staging.loadbalancer.server.port=9001
      - traefik.http.routers.minio-ui-staging.middlewares=minio-staging-stripprefix
      - traefik.http.middlewares.minio-staging-stripprefix.stripprefix.prefixes=/minio/ui

networks:
  proxy:
    external: true
    name: traefik
  backend:

volumes:
  data:
